name: Build

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.1
  SQLX_FEATURES: "rustls,postgres"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Run tests
        run: cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Linting
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Generate code coverage
        run: cargo install cargo-tarpaulin && cargo tarpaulin --verbose --workspace

  build_server:
    name: Compiling Server Release Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Building Rust Server
        run: cargo build -r
      - name: Archive Server Release Build
        uses: actions/upload-artifact@v4
        with:
          name: release-build
          path: target/release/dacha-landing
          retention-days: 1

  build_frontend:
    name: Compiling Static Website Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Building Styles
        run: npm i -g less && lessc src/less/main.less public/css/main.css && lessc src/less/calc.less public/css/calc.css
      - name: Archive Static Website Files
        uses: actions/upload-artifact@v4
        with:
          name: public-build
          path: public/
          retention-days: 1

  deploy:
    name: Deploy build to volumes
    needs: [test, fmt, clippy, coverage, build_server, build_frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Download Server Release Build
        uses: actions/download-artifact@v4
        with:
          name: release-build
      - name: Download Static Website Files
        uses: actions/download-artifact@v4
        with:
          name: public-build
          path: public
      - name: Azure Authentication
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set Cert File
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > private.pem
          sudo chmod 600 private.pem
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
      - name: Stop Current Runtime
        uses: azure/cli@v2
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az vm run-command invoke -g Dacha -n dacha-server --command-id RunShellScript --scripts "sudo systemctl stop dacha.service"
      - name: Upload New Release Build
        run: scp -i private.pem dacha-landing dacha-admin@20.222.178.13:/home/dacha-admin/
      - name: Upload Public Directory
        run: scp -i private.pem -r public dacha-admin@20.222.178.13:/home/dacha-admin/
      - name: Delete Cert
        run: rm private.pem
      - name: Restart Current Runtime
        uses: azure/cli@v2
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az vm run-command invoke -g Dacha -n dacha-server --command-id RunShellScript --scripts "sudo systemctl restart dacha.service"
